/* === */
/* AST */
/* === */
@abstract
rule Abstract2Ast
	transform s : Excel!Ast
	to t : Emf!Ast {
		
	t.uri := s.id;
	t.token := s.token;
	
	if (t.cellValue.isDefined()) {
		"wtf".println();
	}
	if(t.parent.isDefined()) {
		"eh".println();
	}
	
	if (s.isRoot()) {
		t.cellValue ::= s.cellValue;
	} else {
		t.parent ::= s.parent;
	}
}

/* OPERANDS */
@abstract
rule Ast2Operand
	transform s : Excel!Operand
	to t : Emf!Operand
	extends Abstract2Ast {
}

// @primary
rule Ast2OperandText
	transform s : Excel!Text
	to t : Emf!Text 
	extends Ast2Operand {
}

@primary
rule Ast2OperandNumber
	transform s : Excel!Number
	to t : Emf!Number 
	extends Ast2Operand {
}

// @primary
rule Ast2OperandLogical
	transform s : Excel!Logical
	to t : Emf!Logical 
	extends Ast2Operand {
}

// @primary
rule Ast2OperandError
	transform s : Excel!Error
	to t : Emf!Error 
	extends Ast2Operand {
}

// @primary
rule Ast2OperandRange
	transform s : Excel!Range
	to t : Emf!Range 
	extends Ast2Operand {
}

// @primary
rule Ast2OperandRef
	transform s : Excel!Ref
	to t : Emf!Ref 
	extends Ast2Operand {
}

/* FUNCTIONS */
// @primary
rule Ast2Function 
	transform s : Excel!Function 
	to t : Emf!Function
	extends Abstract2Ast {
}

/* INFIX */
@abstract
rule Ast2OperatorInfix
	transform s : Excel!OperatorInfix 
	to t : Emf!OperatorInfix 
	extends Abstract2Ast {
}

// @primary
rule Ast2Exponention
	transform s : Excel!Exponention
	to t : Emf!Exponention
	extends Ast2OperatorInfix {
}

// @primary
rule Ast2Multiplication
	transform s : Excel!Multiplication
	to t : Emf!Multiplication
	extends Ast2OperatorInfix {
}

// @primary
rule Ast2Division
	transform s : Excel!Division
	to t : Emf!Division
	extends Ast2OperatorInfix {
}

// @primary
rule Ast2Addition
	transform s : Excel!Addition
	to t : Emf!Addition
	extends Ast2OperatorInfix {
}

// @primary
rule Ast2Subtraction
	transform s : Excel!Subtraction
	to t : Emf!Subtraction
	extends Ast2OperatorInfix {
}

// @primary
rule Ast2Concatenation
	transform s : Excel!Concatenation
	to t : Emf!Concatenation
	extends Ast2OperatorInfix {
}

// @primary
rule Ast2EQ
	transform s : Excel!EQ
	to t : Emf!EQ
	extends Ast2OperatorInfix {
}

// @primary
rule Ast2LT
	transform s : Excel!LT
	to t : Emf!LT
	extends Ast2OperatorInfix {
}

// @primary
rule Ast2GT
	transform s : Excel!GT
	to t : Emf!GT
	extends Ast2OperatorInfix {
}

// @primary
rule Ast2LTE
	transform s : Excel!LTE
	to t : Emf!LTE
	extends Ast2OperatorInfix {
}

// @primary
rule Ast2GTE
	transform s : Excel!GTE
	to t : Emf!GTE
	extends Ast2OperatorInfix {
}

// @primary
rule Ast2NEQ
	transform s : Excel!NEQ
	to t : Emf!NEQ
	extends Ast2OperatorInfix {
}

// @primary
rule Ast2Intersection
	transform s : Excel!Intersection
	to t : Emf!Intersection
	extends Ast2OperatorInfix {
}

// @primary
rule Ast2Union
	transform s : Excel!Union
	to t : Emf!Union
	extends Ast2OperatorInfix {
}

/* PREFIX */
@abstract
rule Ast2OperatorPrefix
	transform s : Excel!OperatorPrefix 
	to t : Emf!OperatorPrefix 
	extends Abstract2Ast {
}

// @primary
rule Ast2Plus
	transform s : Excel!Plus 
	to t : Emf!Plus 
	extends Ast2OperatorPrefix {
}

// @primary
rule Ast2Negation
	transform s : Excel!Negation 
	to t : Emf!Negation 
	extends Ast2OperatorPrefix {
}

/* POSTFIX */
@abstract
rule Ast2OperatorPostfix
	transform s : Excel!OperatorPostfix
	to t : Emf!OperatorPostfix 
	extends Abstract2Ast {
}

// @primary
rule Ast2Percent
	transform s : Excel!Percent 
	to t : Emf!Percent
	extends Ast2OperatorPostfix {
}
